### 📄 파일 요약: `scripts/commit.py`

#### 🔍 역할
`scripts/commit.py` 파일은 Git 저장소의 변경 사항을 분석하고, AI 모델을 활용하여 커밋 메시지 생성 및 기록 메시지를 작성하는 역할을 합니다. 이 파일은 자동화된 커밋 메시지 생성 프로세스의 핵심 로직을 담당합니다.

#### 📁 Repo 내 위치 및 관련 파일
- `scripts/commit.py`는 `git_auto_v2` 저장소의 `scripts` 디렉토리 내에 위치합니다.
- 주요 관련 파일:
  - `llm_router.py`: AI 모델 호출 기능을 제공하는 모듈.
  - `prompt_by_style`: 다양한 스타일과 언어로 작성된 프롬프트 템플릿이 저장된 디렉토리.
  - `run_all.py`: 전체 자동화 프로세스를 실행하는 메인 스크립트.

#### 💡 주요 기능 및 로직
1. **프롬프트 로딩**:
   - `read_prompt_file` 함수를 통해 지정된 스타일과 언어에 맞는 프롬프트 템플릿을 로드합니다.
   - 프롬프트는 커밋 메시지 생성(`commit_chunk`, `commit_final`)과 기록 메시지(`record`) 작성을 위해 사용됩니다.

2. **커밋 메시지 생성**:
   - `generate_commit_and_record` 함수는 입력된 `diff_chunks` (변경된 코드 청크들)와 `repo_context` (저장소 컨텍스트)를 기반으로 커밋 메시지를 생성합니다.
   - 각 `diff_chunk`에 대해 개별 커밋 메시지를 생성하고, 이를 종합하여 최종 커밋 메시지를 작성합니다.

3. **기록 메시지 생성**:
   - 전체 `diff_chunks`를 결합하여 기록 메시지를 생성합니다.
   - 생성된 기록 메시지는 프로젝트의 변경 이력을 문서화하는 데 사용됩니다.

4. **AI 모델 호출**:
   - `call_llm` 함수를 통해 AI 모델을 호출하여 커밋 메시지 및 기록 메시지를 생성합니다.
   - 다양한 AI 모델 설정을 지원하며, 설정은 `llm_cfg_commit`, `llm_cfg_final`, `llm_cfg_record`와 같은 구성 객체에 정의됩니다.

#### 🔑 로직의 논리
1. **입력 데이터**:
   - `diff_chunks`: Git diff 결과에서 추출된 변경 코드 청크들.
   - `repo_context`: 현재 Git 저장소의 컨텍스트 (전체적인 코드 구조 및 설명).

2. **프로세스 흐름**:
   - 각 `diff_chunk`에 대해 프롬프트를 생성하고 AI 모델을 호출하여 개별 커밋 메시지를 생성합니다.
   - 생성된 개별 커밋 메시지들을 종합하여 최종 커밋 메시지를 생성합니다.
   - 전체 `diff_chunks`를 결합하여 기록 메시지를 생성합니다.

3. **오류 처리**:
   - AI 모델 호출 중 오류가 발생하면 로그에 오류 메시지를 기록하고, 대체 메시지를 반환합니다.

#### 📝 요약
`scripts/commit.py`는 Git 저장소의 변경 사항을 분석하여 AI 모델을 통해 커밋 메시지 및 기록 메시지를 자동으로 생성하는 역할을 합니다. 주요 기능은 다음과 같습니다:
- 변경 코드 청크(`diff_chunks`)와 저장소 컨텍스트(`repo_context`)를 기반으로 커밋 메시지 생성.
- 개별 커밋 메시지와 최종 커밋 메시지 작성.
- 기록 메시지 생성 및 오류 처리.

이 파일은 자동화된 Git 커밋 메시지 생성 프로세스의 핵심 구성 요소로, 프로젝트의 효율적인 버전 관리 및 문서화를 지원합니다.