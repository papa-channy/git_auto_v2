### 📁 `record/notion.py` 파일 분석 및 요약

#### **파일 역할**
`notion.py` 파일은 Git 저장소의 변경 사항을 Notion에 자동 업로드하는 기능을 담당합니다. 이 파일은 Notion API를 활용하여 특정 페이지에 구조화된 데이터를 기록하며, 크게 두 가지 주요 기능을 제공합니다:
1. 날짜별 기록 업로드
2. 집필용 기록 모음 업로드

#### **로직 분석**
1. **Notion API 설정**
   - `.env` 파일에서 `NOTION_API_KEY`와 `NOTION_PAGE_ID`를 로드하여 Notion API에 인증합니다.
   - `HEADERS` 변수에 인증 토큰과 Notion API 버전을 포함하여 API 요청 헤더를 구성합니다.

2. **핵심 함수**
   - **`get_repo_name()`**: 현재 Git 저장소의 이름을 가져옵니다. `git config --get remote.origin.url` 명령어를 실행하여 원격 저장소의 URL을 파싱합니다.
   - **`get_notion_blocks(parent_id)`**: 지정된 Notion 페이지의 하위 블록 목록을 조회합니다.
   - **`find_or_create_toggle_block(parent_id, title_text)`**: 특정 제목의 토글 블록을 찾거나 존재하지 않으면 새로 생성합니다. 이는 Notion 페이지의 구조적 계층을 유지하는 데 사용됩니다.

3. **날짜별 기록 업로드 (`upload_date_based_record`)**
   - 현재 날짜와 시간을 기반으로 계층적 토글 블록을 생성합니다.
     - 최상위: 저장소 이름 (`📁 {repo_name}`)
     - 중간: 년월 (`📅 {년}년 {월}월`)
     - 하위: 일자와 시간 (`🕒 {일}일 {시간}`)
   - 각 시간 토글 블록 하위에 "전체 맥락", "커밋 요약", "집필용 기록"을 단락 블록으로 추가합니다.

4. **집필용 기록 모음 업로드 (`upload_sequential_record`)**
   - 저장소 이름으로 토글 블록을 생성하고, 전달된 `record_msgs` 목록을 순차적으로 번호가 매겨진 토글 블록으로 추가합니다.
   - 각 토글 블록은 기록 메시지를 포함합니다.

#### **논리 및 설계 의도**
- **계층적 구조화**: Notion 페이지에 데이터를 구조적으로 저장하기 위해 토글 블록을 계층적으로 구성합니다. 이를 통해 데이터를 시각적으로 체계화하고, 필요한 정보를 쉽게 탐색할 수 있습니다.
- **자동화**: Git 저장소의 변경 사항을 자동으로 Notion에 기록함으로써, 개발자가 별도로 문서를 관리할 필요 없이 기록을 유지할 수 있습니다.
- **유연성**: `.env` 파일을 통해 Notion API 키와 페이지 ID를 관리하므로, 다양한 환경에서 쉽게 설정할 수 있습니다.

#### **개선 제안**
1. **에러 처리 강화**: 현재 예외 처리가 포괄적입니다. 특정 에러 유형에 따라 더 상세한 처리를 추가하면 안정성을 높일 수 있습니다.
2. **모듈화**: Notion API 호출 부분을 별도의 클라이언트 클래스로 분리하여 재사용성을 높일 수 있습니다.
3. **로깅 추가**: 주요 작업과 에러 발생 시 로깅을 추가하여 디버깅과 모니터링을 용이하게 할 수 있습니다.

#### **요약**
`notion.py` 파일은 Git 저장소의 변경 이력을 Notion에 체계적으로 기록하는 역할을 합니다. Notion API를 활용하여 날짜별 기록과 집필용 기록을 구조화하여 저장하며, 자동화된 문서화를 지원합니다. 향후 에러 처리 강화 및 모듈화를 통해 더욱 견고한 코드로 발전시킬 수 있습니다.