@@ -1,16 +1,10 @@
 from llm_router import call_llm
 from pathlib import Path
 
-# ─────────────────────────────────────
-# 📄 프롬프트 로더 (스타일/언어 기반)
-# ─────────────────────────────────────
 def read_prompt_file(style: str, lang: str) -> str:
     path = Path("prompt_by_style") / lang / f"{style}.txt"
     return path.read_text(encoding="utf-8").strip()
 
-# ─────────────────────────────────────
-# 🚀 메인 함수
-# ─────────────────────────────────────
 def generate_commit_and_record(
     diff_chunks: list[str],
     repo_context: str,
@@ -23,7 +17,7 @@ def generate_commit_and_record(
 ):
     log("✏️ [Commit] 청크별 커밋 메시지 생성 시작")
 
-    # 🔧 프롬프트 스타일 불러오기
+    # 🔧 프롬프트 로딩
     commit_chunk_txt = read_prompt_file(style_cfg["commit_chunk"], lang_cfg["commit"])
     final_commit_txt = read_prompt_file(style_cfg["commit_final"], lang_cfg["commit"])
     record_prompt_txt = read_prompt_file(style_cfg["record"], lang_cfg["record"])
@@ -32,24 +26,24 @@ def generate_commit_and_record(
     prompt_vars = {}
     c_index = 1
 
-    # ────────────────────────────────
-    # 🔹 청크별 커밋 메시지 생성
-    # ────────────────────────────────
     for chunk in diff_chunks:
-        prompt = f"""
-아래는 Git 레포의 전체 맥락 요약과 변경된 diff chunk입니다.
+        prompt = f"""아래는 Git 레포의 전체 맥락 요약과 변경된 diff chunk입니다.
 각 변경 내용을 기반으로, 내부 프로젝트에 적합한 커밋 메시지를 요청에 맞게 작성하세요.
 
-🧱 Repo context:
+[Repo context]
 {repo_context}
 
-📝 변경된 diff 청크:
+[변경된 diff 청크]
 {chunk}
 
 {commit_chunk_txt}
 """
         var_name = f"c{c_index}"
-        prompt_vars[var_name] = prompt
+        prompt_vars[var_name] = {
+            "text": prompt,
+            "model": llm_cfg_commit["model"][0],
+            "purpose": "commit_chunk"
+        }
         c_index += 1
 
         try: