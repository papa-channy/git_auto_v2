@@ -1,38 +1,46 @@
 from pathlib import Path
 from datetime import datetime
+import subprocess
+def get_repo_name() -> str:
+    url = subprocess.run("git config --get remote.origin.url", shell=True, capture_output=True, text=True).stdout.strip()
+    return url.rstrip(".git").split("/")[-1].replace("-", " ").title() if url else "Unknown Repo"
 
+# 🔍 Git 루트 경로 탐지
+def get_git_root() -> Path:
+    try:
+        root = subprocess.run(
+            ["git", "rev-parse", "--show-toplevel"],
+            check=True, capture_output=True, text=True
+        ).stdout.strip()
+        return Path(root)
+    except subprocess.CalledProcessError:
+        return Path.cwd()
+
+# 📁 결과 경로 생성기
 def get_result_paths(timestamp: str) -> dict:
-    """
-    실행 기준 타임스탬프에 따라 결과 저장용 경로를 생성하고 반환합니다.
-    반환 구조는 dict로 각 결과 타입별 저장 경로를 포함합니다.
-    """
     dt = datetime.strptime(timestamp, "%Y%m%d_%H%M")
     date_key = dt.strftime("%y%m%d_%H%M")
-    result_base = Path("results") / date_key
+    base = get_git_root() / "results" / date_key
 
     paths = {
-        "base": result_base,
-        "context_by_file": result_base / "context" / "by_file",
-        "context_summary": result_base / "context" / "sum" / "summary.txt",
-        "diff_chunks": result_base / "diff" / "chunk",
-        "diff_final": result_base / "diff" / "sum" / "commit.txt",
-        "final_commit": result_base / "final" / "commit.txt",
-        "final_record": result_base / "final" / "record.txt",
+        "base": base,
+        "context_by_file": base / "context" / "by_file",
+        "context_summary": base / "context" / "sum" / "summary.txt",
+        "diff_chunks": base / "diff" / "chunk",
+        "diff_final": base / "diff" / "sum" / "commit.txt",
+        "final_commit": base / "final" / "commit.txt",
+        "final_record": base / "final" / "record.txt",
     }
 
-    # 디렉토리 생성
     for key, path in paths.items():
         if key.startswith("context") or key.startswith("diff") or key.startswith("final"):
             path.parent.mkdir(parents=True, exist_ok=True)
 
     return paths
 
+# 📊 LLM 비용 로그 경로
 def get_cost_log_path(timestamp: str) -> Path:
-    """
-    LLM 호출 로그를 저장할 cost 경로 반환
-    ex: cost/250514_1810/llm_20240514_1810.jsonl
-    """
     dt = datetime.strptime(timestamp, "%Y%m%d_%H%M")
-    base = Path("cost") / dt.strftime("%y%m%d_%H%M")
+    base = get_git_root() / "cost" / dt.strftime("%y%m%d_%H%M")
     base.mkdir(parents=True, exist_ok=True)
     return base / f"llm_{timestamp}.jsonl"
diff --git a/utils/set_auto.bat b/utils/set_auto.bat
deleted file mode 100644
index a66e94d..0000000
--- a/utils/set_auto.bat
+++ /dev/null
@@ -1,2 +0,0 @@
-@echo off
-start "" "C:\Program Files\Git\bin\bash.exe" --login -i "C:/Users/yourname/git_auto/auto_git.sh"